import asyncio
import sqlite3

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TOKEN = "7834904438:AAHubO40vClDMquA36JXozqkDMVnV9kMPNQ"
ADMIN_IDS = [6167391728, 6668526095, 5343772278]  # –°–ø–∏—Å–æ–∫ telegram user_id –∞–¥–º—ñ–Ω—ñ–≤
GROUP_LINK = "https://t.me/dniproallo"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–∞–∑–∏ ---
conn = sqlite3.connect("db.sqlite3")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER,
    username TEXT,
    q1 TEXT,
    q2 TEXT,
    q3 TEXT,
    q4 TEXT,
    q5 TEXT,
    q6 TEXT,
    video_file_id TEXT
)
""")
conn.commit()

# --- FSM —Å—Ç–∞–Ω–∏ ---
class JoinForm(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    video = State()

# --- /start ---
@router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        "–£–≤–∞—Å–∞–ø!) –Ø ‚Äî –±–æ—Ç-–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫. –Ø–∫—â–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏ –¥—Ä–æ–≥—É –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏, —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –≥–æ—Ç–æ–≤–∏–π, —â–æ –≤ –∫—ñ–Ω—Ü—ñ –ø–æ–ø—Ä–æ—à—É –∫—Ä—É–∂–µ—á–æ–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ —Ç–∏ —Ä–µ–∞–ª—å–Ω–∞ –ª—é–¥–∏–Ω–∞.\n\n"
        "–ì–æ—Ç–æ–≤–∏–π(-–∞) –ø–æ—á–∞—Ç–∏?",
        reply_markup=InlineKeyboardBuilder()
            .button(text="–ü–æ—á–∞—Ç–∏", callback_data="start_form")
            .as_markup()
    )
    await state.clear()

@router.callback_query(F.data == "start_form")
async def start_form(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("1.–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    await state.set_state(JoinForm.q1)
    await callback.answer()

@router.message(JoinForm.q1)
async def process_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer("2.–ù–∞ —è–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ –ø—Ä–æ–∂–∏–≤–∞—î—à?")
    await state.set_state(JoinForm.q2)

@router.message(JoinForm.q2)
async def process_q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await message.answer("3.–Ø–∫—â–æ —Ç–∏ –Ω–µ —Ö–æ—á–µ—à —Å–≤—ñ—Ç–∏—Ç–∏ –æ–±–ª–∏—á—á—è –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö, —á–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏, –ª—é–¥—å–º–∏ –∞–±–æ —ñ–¥–µ—è–º–∏?")
    await state.set_state(JoinForm.q3)

@router.message(JoinForm.q3)
async def process_q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await message.answer("4.–ß–∏ —î —Ä—ñ–∑–Ω–∏—Ü—è —è–∫–æ—é –º–æ–≤–æ—é –≥–æ–≤–æ—Ä–∏—Ç—å –ª—é–¥–∏–Ω–∞?")
    await state.set_state(JoinForm.q4)

@router.message(JoinForm.q4)
async def process_q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    await message.answer("5.–ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π In Real Life? –Ü —è–∫—à–æ —Å–ª–∞–±–æ, —Ç–æ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—é —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ?")
    await state.set_state(JoinForm.q5)

@router.message(JoinForm.q5)
async def process_q5(message: types.Message, state: FSMContext):
    await state.update_data(q5=message.text)
    await message.answer("6.–Ø–∫ —Å—Ç–∞–≤–∏—à—Å—è –¥–æ —à–∫—ñ–¥–ª–∏–≤–∏—Ö –∑–≤–∏—á–æ–∫?")
    await state.set_state(JoinForm.q6)

@router.message(JoinForm.q6)
async def process_q6(message: types.Message, state: FSMContext):
    await state.update_data(q6=message.text)
    await message.answer("7.–ó–∞–ø–∏—à–∏ –∫—Ä—É–∂–µ—á–æ–∫ –∑—ñ —Å–ª–æ–≤–∞–º–∏: –ü–æ–≤—ñ—Ä –º–µ–Ω—ñ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫, —è —Å–ø—Ä–∞–≤–∂–Ω—ñ–π.")
    await state.set_state(JoinForm.video)

@router.message(JoinForm.video)
async def process_video_note(message: types.Message, state: FSMContext):
    if not message.video_note:
        await message.answer("‚ùó –¶–µ –∑–≤—ñ—Å–Ω–æ —Ü—ñ–∫–∞–≤–æ, –∞ –∫—Ä—É–∂–µ—á–æ–∫ –±—É–¥–µ —Å—å–æ–¥–Ω—ñ?).")
        return

    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username or "N/A"
    video_id = message.video_note.file_id

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
    try:
        cursor.execute(
    "INSERT INTO users (user_id, username, q1, q2, q3, q4, q5, q6, video_file_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
    (
        user_id,
        username,
        data['q1'],
        data['q2'],
        data['q3'],
        data['q4'],
        data['q5'],
        data['q6'],
        video_id
    )
)
        conn.commit()
    except Exception as e:
        await message.answer("–û–π, —à–æ—Å—å —è –Ω–∞–∫—Ä–∏–≤—Å—è –ø–æ—Ö–æ–¥—É, —Å–ø—Ä–æ–±—É–π —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–∂–µ.")
        print(f"DB error: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ –ì–æ–¥–∏—Ç—å—Å—è", callback_data=f"approve:{user_id}")
            builder.adjust(1)  # –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥

            text = (
                f"üßæ <b>–ó–∞—è–≤–∫–∞ –≤—ñ–¥:</b> @{username}\n\n"
                f"1. –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? - {data['q1']}\n"
                f"2. –†–∞–π–æ–Ω? - {data['q2']}\n"
                f"3. –ü—Ä–∏–π–Ω—è—Ç—Ç—è —É—á–∞—Å—Ç—ñ –≤ –≤—ñ–¥–µ–æ - {data['q3']}\n"
                f"4. –ß–∏ —î —Ä—ñ–∑–Ω–∏—Ü—è —è–∫–æ—é –º–æ–≤–æ—é –≥–æ–≤–æ—Ä–∏—Ç—å –ª—é–¥–∏–Ω–∞? - {data['q4']}\n"
                f"5. –í—ñ–¥–∫—Ä–∏—Ç—ñ—Å—Ç—å –ª—é–¥–∏–Ω–∏ - {data['q5']}\n"
                f"6. –Ø–∫ —Å—Ç–∞–≤–∏—à—Å—è –¥–æ —à–∫—ñ–¥–ª–∏–≤–∏—Ö –∑–≤–∏—á–æ–∫? –Ø–∫—ñ —Å–∞–º –º–∞—î—à? - {data['q6']}"
            )

            await bot.send_message(admin_id, text, reply_markup=builder.as_markup())

            if video_id:
                await bot.send_video_note(admin_id, video_note=video_id)

            print(f"üì¨ –ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∞–¥–º—ñ–Ω—É {admin_id}")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

    await message.answer("‚úÖ –ß–µ–∫–∞–π –¥–æ–∫–∏ –∞–¥–º—ñ–Ω–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç—å —à–æ —Ç–∏ –ø–æ–Ω–∞–ø–∏—Å—É–≤–∞–≤(–ª–∞).")
    await state.clear()

# --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ---
@router.callback_query(F.data.startswith("approve:"))
async def approve_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    try:
        await bot.send_message(user_id, f"üéâ –û–π–π–π –±–ª*—å, –Ω–∞—Ä–µ—à—Ç—ñ —Ü—ñ —à–∫—ñ—Ä—è–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ç–µ–±–µ —ñ —Ç–µ–ø–µ—Ä —è –ø–æ–∫–∞–∂—É –¥–æ—Ä–æ–≥—É: {GROUP_LINK}")
        await callback.answer("–ô–æ–º—É –¥—ñ–π—à–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ö–∞–π –¥—É–º–∞ –∑–∞—Ö–æ–¥–∏—Ç—å —á–∏ –Ω—î ‚úÖ", show_alert=True)
    except Exception as e:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ‚ùå", show_alert=True)
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

# --- –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ ---
dp.include_router(router)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())